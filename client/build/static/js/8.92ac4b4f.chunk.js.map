{"version":3,"sources":["components/checkout-item/checkout-item.component.jsx","components/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.component.jsx"],"names":["connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","name","imageUrl","price","quantity","className","src","alt","onClick","StripeCheckoutButton","priceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","cartTotal","selectCartTotal","map","key","id"],"mappings":"qOAgCeA,G,OAAAA,YAAQ,MANI,SAAAC,GAAQ,MAAK,CACpCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAG7BH,EAzBM,SAAC,GAAmD,IAAjDO,EAAgD,EAAhDA,SAAUL,EAAsC,EAAtCA,UAAWG,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,WAC1CE,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,SAAUC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAC/B,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKC,IAAKJ,EAAUK,IAAI,UAE5B,0BAAMF,UAAU,QAAQJ,GACxB,0BAAMI,UAAU,YACZ,yBAAKA,UAAU,QAAQG,QAAS,kBAAMT,EAAWC,KAAjD,UACA,0BAAMK,UAAU,SAASD,GACzB,yBAAKC,UAAU,QAAQG,QAAS,kBAAMV,EAAQE,KAA9C,WAEJ,0BAAMK,UAAU,SAASF,GACzB,yBAAKE,UAAU,gBAAgBG,QAAS,kBAAMb,EAAUK,KAAxD,e,oCCsBGS,EAvCc,SAAC,GAAe,IAAbN,EAAY,EAAZA,MACtBO,EAAyB,IAARP,EAqBvB,OACI,kBAAC,IAAD,CACAQ,MAAM,UACNV,KAAK,kBACLW,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoBZ,GAC/Ba,OAAQN,EACRO,WAAW,UACXC,MA5BY,SAAAA,GACbC,IAAM,CACFC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACFN,OAAQN,EACRQ,WAELK,MAAK,SAAAC,GACJC,MAAM,oCACPC,OAAM,SAAAC,GACLC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MACI,4FAgBPO,UA/BmB,gDC0CrBC,G,OAAkBC,YAAyB,CAC7CC,UAAWC,IACXC,UAAWC,OAGA7C,sBAAQwC,EAARxC,EA3CM,SAAC,GAAD,IAAE0C,EAAF,EAAEA,UAAWE,EAAb,EAAaA,UAAb,OAClB,yBAAKhC,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBACX,0CAEJ,yBAAKA,UAAU,gBACX,8CAEJ,yBAAKA,UAAU,gBACX,2CAEJ,yBAAKA,UAAU,gBACX,wCAEJ,yBAAKA,UAAU,gBACX,0CAGP8B,EAAUI,KAAI,SAAAvC,GAAQ,OACtB,kBAAC,EAAD,CAAcwC,IAAKxC,EAASyC,GAAIzC,SAAUA,OAG1C,yBAAKK,UAAU,SAAf,WACagC,GAEb,yBAAKhC,UAAU,gBAAf,2DAEI,6BAFJ,0FAOA,kBAAC,EAAD,CAAsBF,MAAOkC","file":"static/js/8.92ac4b4f.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart.actions';\n\nimport './checkout-item.styles.scss';\n\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) =>  {\n    const { name, imageUrl, price, quantity } = cartItem;\n    return (\n        <div className=\"checkout-item\">\n            <div className='image-container'>\n                <img src={imageUrl} alt='item' />\n            </div>\n            <span className='name'>{name}</span>\n            <span className='quantity'>\n                <div className='arrow' onClick={() => removeItem(cartItem)}>&#10094;</div>\n                <span className='value'>{quantity}</span>\n                <div className='arrow' onClick={() => addItem(cartItem)}>&#10095;</div>\n            </span>\n            <span className='price'>{price}</span>\n            <div className='remove-button' onClick={() => clearItem(cartItem)}>&#10005;</div>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    clearItem: item => dispatch(clearItemFromCart(item)),\n    addItem: item => dispatch(addItem(item)),\n    removeItem: item => dispatch(removeItem(item)),\n})\n\nexport default connect(null, mapDispatchToProps)(CheckoutItem);\n","import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\nconst StripeCheckoutButton = ({ price }) => {\n    const priceForStripe = price * 100;\n    const publishableKey = 'pk_test_6yUv5aCl2OEjjwTcyYNkz9CW00i0yMc6Lt';\n\n    const onToken = token => {\n       axios({\n           url: 'payment',\n           method: 'post',\n           data: {\n               amount: priceForStripe,\n               token\n           }\n       }).then(response => {\n           alert('Payment Accepted Successfully')\n       }).catch(error => {\n           console.log('Payment error: ', JSON.parse(error));\n           alert(\n               'There was an issue with your payment. Please ensure you use the provided credit card'\n           );\n       });\n    };\n\n    return (\n        <StripeCheckout\n        label=\"Pay now\"\n        name='React Ecommerce'\n        billingAddress\n        shippingAddress\n        image='https://svgshare.com/i/CUz.svg'\n        description={`Your total is $${price}`}\n        amount={priceForStripe}\n        panelLabel='Pay Now'\n        token={onToken}\n        stripeKey={publishableKey}\n        />\n    )\n\n}\n\nexport default StripeCheckoutButton;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCartItems, selectCartTotal } from '../../redux/cart/cart.selectors';\n\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\n\nimport './checkout.styles.scss';\n\nconst CheckoutPage = ({cartItems, cartTotal }) => (\n   <div className='checkout-page'>\n       <div className='checkout-header'>\n           <div className='header-block'>\n               <span>Product</span>\n           </div>\n           <div className='header-block'>\n               <span>Description</span>\n           </div>\n           <div className='header-block'>\n               <span>Quantity</span>\n           </div>\n           <div className='header-block'>\n               <span>Price</span>\n           </div>\n           <div className='header-block'>\n               <span>Remove</span>\n           </div>\n       </div>\n       {cartItems.map(cartItem => \n        <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n        )}\n\n        <div className='total'>\n            Total: ${cartTotal}\n        </div>\n        <div className='test-warning'>\n            *Please use the following test credit card for payments*\n            <br />\n            4242 4242 4242 4242 - Exp: 01/20 - CSV: 123\n            from https://stripe.com/docs/testing#cards\n\n        </div>\n        <StripeCheckoutButton price={cartTotal} />\n   </div>\n\n);\n\nconst mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems,\n    cartTotal: selectCartTotal\n})\n\nexport default connect(mapStateToProps)(CheckoutPage);\n"],"sourceRoot":""}