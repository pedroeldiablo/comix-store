{"version":3,"sources":["pages/collection/collection.component.jsx","pages/collection/colllection.container.jsx","redux/shop/shop.selectors.js","components/with-spinner/with-spinner.component.jsx","components/collection-item/collection-item.component.jsx"],"names":["connect","state","ownProps","collection","selectCollection","match","params","collectionId","title","items","className","map","item","key","id","mapStateToProps","createStructuredSelector","isLoading","selectIsCollectionsLoaded","CollectionPageContainer","compose","WithSpinner","CollectionPage","selectShop","shop","selectShopCollection","createSelector","collections","selectCollectionsForPreview","Object","keys","collectionUrlParam","selectIsCollectionFetching","isFetching","WrappedComponent","otherProps","dispatch","addItem","name","price","imageUrl","style","backgroundImage","onClick","inverted"],"mappings":"+NAkCeA,G,OAAAA,aAJS,SAACC,EAAOC,GAAR,MAAsB,CAC1CC,WAAYC,YAAiBF,EAASG,MAAMC,OAAOC,aAAvCH,CAAqDH,MAGtDD,EAvBQ,SAAC,GAAoB,IAAlBG,EAAiB,EAAjBA,WACfK,EAAiBL,EAAjBK,MAAOC,EAAUN,EAAVM,MAEd,OAEA,yBAAKC,UAAU,mBACX,wBAAIA,UAAU,SAASF,GACvB,yBAAKE,UAAU,SAEPD,EAAME,KAAI,SAAAC,GAAI,OAAK,kBAAC,IAAD,CAAgBC,IAAKD,EAAKE,GAAKF,KAAMA,aCZlEG,EAAkBC,YAAyB,CAC7CC,UAAW,SAAChB,GAAD,OAAYiB,YAA0BjB,MAG/CkB,EAA0BC,YAC5BpB,YAAQe,GACRM,IAF4BD,CAG1BE,GAESH,a,gCCjBf,oJAGMI,EAAa,SAAAtB,GAAK,OAAIA,EAAMuB,MAErBC,EAAuBC,YAChC,CAACH,IACD,SAACC,GAAD,OAAUA,EAAKG,eAGNC,EAA8BF,YACvC,CAACD,IACD,SAAAE,GAAW,OAAKA,EAAcE,OAAOC,KAAKH,GAAahB,KAAI,SAAAE,GAAG,OAAIc,EAAYd,MAAQ,MAG7ET,EAAmB,SAAA2B,GAAkB,OAClDL,YACI,CAACD,IACD,SAAAE,GAAW,OAAKA,EAAcA,EAAYI,GAAsB,SAGvDC,EAA6BN,YACtC,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKS,cAGJf,EAA4BQ,YACrC,CAACH,IACD,SAAAC,GAAI,QAAMA,EAAKG,gB,oECfJN,IATK,SAAAa,GAAgB,OAChC,YAAiC,IAA/BjB,EAA8B,EAA9BA,UAAckB,EAAgB,6BAC5B,OAAOlB,EACH,kBAAC,IAAD,MAEA,kBAACiB,EAAqBC,M,gCCTlC,kDAiCenC,gBAAQ,MAJI,SAAAoC,GAAQ,MAAK,CACpCC,QAAS,SAAAzB,GAAI,OAAIwB,EAASC,YAAQzB,QAGvBZ,EAxBQ,SAAC,GAAsB,IAArBY,EAAoB,EAApBA,KAAMyB,EAAc,EAAdA,QACnBC,EAAyB1B,EAAzB0B,KAAMC,EAAmB3B,EAAnB2B,MAAOC,EAAY5B,EAAZ4B,SACpB,OAEG,yBAAK9B,UAAU,mBACX,yBAAKA,UAAU,QACf+B,MAAO,CACHC,gBAAgB,OAAD,OAASF,EAAT,QAInB,yBAAK9B,UAAU,qBACX,0BAAMA,UAAU,QAAQ4B,GACxB,0BAAM5B,UAAU,SAAS6B,IAE7B,kBAAC,IAAD,CAAcI,QAAS,kBAAMN,EAAQzB,IAAOgC,UAAQ,GAApD,oB","file":"static/js/7.e34cea82.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\n\nimport CollectionItem from '../../components/collection-item/collection-item.component';\n\nimport { selectCollection } from '../../redux/shop/shop.selectors';\n\n\nimport './collection.styles.scss';\n\nconst CollectionPage = ({ collection }) => {\n   const { title, items } = collection;\n    \n    return (\n\n    <div className=\"collection-page\">\n        <h2 className='title'>{title}</h2>\n        <div className='items'>\n            {\n                items.map(item =>  <CollectionItem key={item.id}  item={item}/>)\n            }\n\n        </div>\n       \n    </div>\n\n)\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    collection: selectCollection(ownProps.match.params.collectionId)(state)\n})\n\nexport default connect(mapStateToProps)(CollectionPage);\n","import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\n\nimport { selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionPage from './collection.component';\n\nconst mapStateToProps = createStructuredSelector({\n    isLoading: (state) => !selectIsCollectionsLoaded(state)\n});\n\nconst CollectionPageContainer = compose(\n    connect(mapStateToProps),\n    WithSpinner,\n    )(CollectionPage);\n\nexport default CollectionPageContainer;\n","import { createSelector } from 'reselect';\n\n\nconst selectShop = state => state.shop;\n\nexport const selectShopCollection = createSelector(\n    [selectShop],\n    (shop) => shop.collections\n)\n\nexport const selectCollectionsForPreview = createSelector(\n    [selectShopCollection],\n    collections =>  collections ? Object.keys(collections).map(key => collections[key]) : [] \n)\n\nexport const selectCollection = collectionUrlParam => \ncreateSelector(\n    [selectShopCollection],\n    collections => (collections ? collections[collectionUrlParam] : null)\n)\n\nexport const selectIsCollectionFetching = createSelector(\n    [selectShop],\n    shop => shop.isFetching\n)\n\nexport const selectIsCollectionsLoaded = createSelector(\n    [selectShop],\n    shop => !!shop.collections\n)\n","import React from 'react';\n\nimport Spinner from '../spinner/spinner.component';\n\nconst WithSpinner = WrappedComponent => \n    ({isLoading, ...otherProps}) => {\n        return isLoading ? (\n            <Spinner />\n        ) : (\n            <WrappedComponent {...otherProps} />\n        )\n    };\n\nexport default WithSpinner;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addItem } from '../../redux/cart/cart.actions'\n\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport './collection-item.styles.scss'\n\n\nconst CollectionItem = ({item, addItem }) => {\n    const { name, price, imageUrl} = item;\n     return (\n         \n        <div className='collection-item'>\n            <div className='image'\n            style={{\n                backgroundImage: `url(${imageUrl})`\n            }}\n            \n            />\n            <div className='collection-footer'>\n                <span className='name'>{name}</span>\n                <span className='price'>{price}</span>\n            </div>\n            <CustomButton onClick={() => addItem(item)} inverted>Add to cart</CustomButton>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    addItem: item => dispatch(addItem(item)),\n})\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);\n"],"sourceRoot":""}